# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:53:57+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, UnsuportedSecurityStub
from fastapi import Header

app = MCPProxy(
    contact={'email': 'ServiceDesk@openbanking.org.uk', 'name': 'Service Desk'},
    description='Swagger for Event Notification API Specification - TPP Endpoints',
    license={
        'name': 'open-licence',
        'url': 'https://www.openbanking.org.uk/open-licence',
    },
    termsOfService='https://www.openbanking.org.uk/terms',
    title='Event Notification API Specification - TPP Endpoints',
    version='3.1.7',
    servers=[{'url': 'https://openbanking.org.uk'}, {'url': '/open-banking/v3.1'}],
)


@app.post('/event-notifications', tags=['event_notification_management'])
def create_event_notification(
    x_fapi_financial_id: str = Header(..., alias='x-fapi-financial-id'),
    x_fapi_interaction_id: Optional[str] = Header(None, alias='x-fapi-interaction-id'),
):
    """
    Send an event notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
